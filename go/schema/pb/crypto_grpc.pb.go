// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptoClient is the client API for Crypto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoClient interface {
	GetCrypto(ctx context.Context, in *CryptoPayload, opts ...grpc.CallOption) (*CryptoPayload, error)
	GetCryptos(ctx context.Context, in *CryptoPayloads, opts ...grpc.CallOption) (*CryptoPayloads, error)
	CreateCrypto(ctx context.Context, in *CryptoPayload, opts ...grpc.CallOption) (*CryptoResponse, error)
	CreateCryptos(ctx context.Context, in *CryptoPayloads, opts ...grpc.CallOption) (*CryptoResponse, error)
}

type cryptoClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoClient(cc grpc.ClientConnInterface) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) GetCrypto(ctx context.Context, in *CryptoPayload, opts ...grpc.CallOption) (*CryptoPayload, error) {
	out := new(CryptoPayload)
	err := c.cc.Invoke(ctx, "/cyrpto.Crypto/GetCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) GetCryptos(ctx context.Context, in *CryptoPayloads, opts ...grpc.CallOption) (*CryptoPayloads, error) {
	out := new(CryptoPayloads)
	err := c.cc.Invoke(ctx, "/cyrpto.Crypto/GetCryptos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) CreateCrypto(ctx context.Context, in *CryptoPayload, opts ...grpc.CallOption) (*CryptoResponse, error) {
	out := new(CryptoResponse)
	err := c.cc.Invoke(ctx, "/cyrpto.Crypto/CreateCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) CreateCryptos(ctx context.Context, in *CryptoPayloads, opts ...grpc.CallOption) (*CryptoResponse, error) {
	out := new(CryptoResponse)
	err := c.cc.Invoke(ctx, "/cyrpto.Crypto/CreateCryptos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoServer is the server API for Crypto service.
// All implementations must embed UnimplementedCryptoServer
// for forward compatibility
type CryptoServer interface {
	GetCrypto(context.Context, *CryptoPayload) (*CryptoPayload, error)
	GetCryptos(context.Context, *CryptoPayloads) (*CryptoPayloads, error)
	CreateCrypto(context.Context, *CryptoPayload) (*CryptoResponse, error)
	CreateCryptos(context.Context, *CryptoPayloads) (*CryptoResponse, error)
	mustEmbedUnimplementedCryptoServer()
}

// UnimplementedCryptoServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoServer struct {
}

func (UnimplementedCryptoServer) GetCrypto(context.Context, *CryptoPayload) (*CryptoPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrypto not implemented")
}
func (UnimplementedCryptoServer) GetCryptos(context.Context, *CryptoPayloads) (*CryptoPayloads, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCryptos not implemented")
}
func (UnimplementedCryptoServer) CreateCrypto(context.Context, *CryptoPayload) (*CryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrypto not implemented")
}
func (UnimplementedCryptoServer) CreateCryptos(context.Context, *CryptoPayloads) (*CryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCryptos not implemented")
}
func (UnimplementedCryptoServer) mustEmbedUnimplementedCryptoServer() {}

// UnsafeCryptoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoServer will
// result in compilation errors.
type UnsafeCryptoServer interface {
	mustEmbedUnimplementedCryptoServer()
}

func RegisterCryptoServer(s grpc.ServiceRegistrar, srv CryptoServer) {
	s.RegisterService(&Crypto_ServiceDesc, srv)
}

func _Crypto_GetCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).GetCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyrpto.Crypto/GetCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).GetCrypto(ctx, req.(*CryptoPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_GetCryptos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoPayloads)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).GetCryptos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyrpto.Crypto/GetCryptos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).GetCryptos(ctx, req.(*CryptoPayloads))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_CreateCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).CreateCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyrpto.Crypto/CreateCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).CreateCrypto(ctx, req.(*CryptoPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_CreateCryptos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoPayloads)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).CreateCryptos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyrpto.Crypto/CreateCryptos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).CreateCryptos(ctx, req.(*CryptoPayloads))
	}
	return interceptor(ctx, in, info, handler)
}

// Crypto_ServiceDesc is the grpc.ServiceDesc for Crypto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crypto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cyrpto.Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCrypto",
			Handler:    _Crypto_GetCrypto_Handler,
		},
		{
			MethodName: "GetCryptos",
			Handler:    _Crypto_GetCryptos_Handler,
		},
		{
			MethodName: "CreateCrypto",
			Handler:    _Crypto_CreateCrypto_Handler,
		},
		{
			MethodName: "CreateCryptos",
			Handler:    _Crypto_CreateCryptos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto.proto",
}
