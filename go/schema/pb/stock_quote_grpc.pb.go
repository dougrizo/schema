// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockQuoteClient is the client API for StockQuote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockQuoteClient interface {
	GetStockQuote(ctx context.Context, in *StockQuoteFilter, opts ...grpc.CallOption) (*StockQuotePayload, error)
	GetStockQuotes(ctx context.Context, in *StockQuoteFilter, opts ...grpc.CallOption) (*StockQuotePayloads, error)
	StreamGetStockQuotes(ctx context.Context, in *StockQuoteFilter, opts ...grpc.CallOption) (StockQuote_StreamGetStockQuotesClient, error)
	CreateStockQuote(ctx context.Context, in *StockQuotePayload, opts ...grpc.CallOption) (*StockQuoteResponse, error)
	CreateStockQuotes(ctx context.Context, in *StockQuotePayloads, opts ...grpc.CallOption) (*StockQuoteResponse, error)
	StreamCreateStockQuotes(ctx context.Context, opts ...grpc.CallOption) (StockQuote_StreamCreateStockQuotesClient, error)
	DeleteStockQuotes(ctx context.Context, in *StockQuoteFilter, opts ...grpc.CallOption) (*StockQuoteResponse, error)
}

type stockQuoteClient struct {
	cc grpc.ClientConnInterface
}

func NewStockQuoteClient(cc grpc.ClientConnInterface) StockQuoteClient {
	return &stockQuoteClient{cc}
}

func (c *stockQuoteClient) GetStockQuote(ctx context.Context, in *StockQuoteFilter, opts ...grpc.CallOption) (*StockQuotePayload, error) {
	out := new(StockQuotePayload)
	err := c.cc.Invoke(ctx, "/stock_quote.StockQuote/GetStockQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockQuoteClient) GetStockQuotes(ctx context.Context, in *StockQuoteFilter, opts ...grpc.CallOption) (*StockQuotePayloads, error) {
	out := new(StockQuotePayloads)
	err := c.cc.Invoke(ctx, "/stock_quote.StockQuote/GetStockQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockQuoteClient) StreamGetStockQuotes(ctx context.Context, in *StockQuoteFilter, opts ...grpc.CallOption) (StockQuote_StreamGetStockQuotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockQuote_ServiceDesc.Streams[0], "/stock_quote.StockQuote/StreamGetStockQuotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockQuoteStreamGetStockQuotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockQuote_StreamGetStockQuotesClient interface {
	Recv() (*StockQuotePayload, error)
	grpc.ClientStream
}

type stockQuoteStreamGetStockQuotesClient struct {
	grpc.ClientStream
}

func (x *stockQuoteStreamGetStockQuotesClient) Recv() (*StockQuotePayload, error) {
	m := new(StockQuotePayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stockQuoteClient) CreateStockQuote(ctx context.Context, in *StockQuotePayload, opts ...grpc.CallOption) (*StockQuoteResponse, error) {
	out := new(StockQuoteResponse)
	err := c.cc.Invoke(ctx, "/stock_quote.StockQuote/CreateStockQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockQuoteClient) CreateStockQuotes(ctx context.Context, in *StockQuotePayloads, opts ...grpc.CallOption) (*StockQuoteResponse, error) {
	out := new(StockQuoteResponse)
	err := c.cc.Invoke(ctx, "/stock_quote.StockQuote/CreateStockQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockQuoteClient) StreamCreateStockQuotes(ctx context.Context, opts ...grpc.CallOption) (StockQuote_StreamCreateStockQuotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockQuote_ServiceDesc.Streams[1], "/stock_quote.StockQuote/StreamCreateStockQuotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockQuoteStreamCreateStockQuotesClient{stream}
	return x, nil
}

type StockQuote_StreamCreateStockQuotesClient interface {
	Send(*StockQuotePayload) error
	CloseAndRecv() (*StockQuoteResponse, error)
	grpc.ClientStream
}

type stockQuoteStreamCreateStockQuotesClient struct {
	grpc.ClientStream
}

func (x *stockQuoteStreamCreateStockQuotesClient) Send(m *StockQuotePayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stockQuoteStreamCreateStockQuotesClient) CloseAndRecv() (*StockQuoteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StockQuoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stockQuoteClient) DeleteStockQuotes(ctx context.Context, in *StockQuoteFilter, opts ...grpc.CallOption) (*StockQuoteResponse, error) {
	out := new(StockQuoteResponse)
	err := c.cc.Invoke(ctx, "/stock_quote.StockQuote/DeleteStockQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockQuoteServer is the server API for StockQuote service.
// All implementations must embed UnimplementedStockQuoteServer
// for forward compatibility
type StockQuoteServer interface {
	GetStockQuote(context.Context, *StockQuoteFilter) (*StockQuotePayload, error)
	GetStockQuotes(context.Context, *StockQuoteFilter) (*StockQuotePayloads, error)
	StreamGetStockQuotes(*StockQuoteFilter, StockQuote_StreamGetStockQuotesServer) error
	CreateStockQuote(context.Context, *StockQuotePayload) (*StockQuoteResponse, error)
	CreateStockQuotes(context.Context, *StockQuotePayloads) (*StockQuoteResponse, error)
	StreamCreateStockQuotes(StockQuote_StreamCreateStockQuotesServer) error
	DeleteStockQuotes(context.Context, *StockQuoteFilter) (*StockQuoteResponse, error)
	mustEmbedUnimplementedStockQuoteServer()
}

// UnimplementedStockQuoteServer must be embedded to have forward compatible implementations.
type UnimplementedStockQuoteServer struct {
}

func (UnimplementedStockQuoteServer) GetStockQuote(context.Context, *StockQuoteFilter) (*StockQuotePayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockQuote not implemented")
}
func (UnimplementedStockQuoteServer) GetStockQuotes(context.Context, *StockQuoteFilter) (*StockQuotePayloads, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockQuotes not implemented")
}
func (UnimplementedStockQuoteServer) StreamGetStockQuotes(*StockQuoteFilter, StockQuote_StreamGetStockQuotesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGetStockQuotes not implemented")
}
func (UnimplementedStockQuoteServer) CreateStockQuote(context.Context, *StockQuotePayload) (*StockQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStockQuote not implemented")
}
func (UnimplementedStockQuoteServer) CreateStockQuotes(context.Context, *StockQuotePayloads) (*StockQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStockQuotes not implemented")
}
func (UnimplementedStockQuoteServer) StreamCreateStockQuotes(StockQuote_StreamCreateStockQuotesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCreateStockQuotes not implemented")
}
func (UnimplementedStockQuoteServer) DeleteStockQuotes(context.Context, *StockQuoteFilter) (*StockQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStockQuotes not implemented")
}
func (UnimplementedStockQuoteServer) mustEmbedUnimplementedStockQuoteServer() {}

// UnsafeStockQuoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockQuoteServer will
// result in compilation errors.
type UnsafeStockQuoteServer interface {
	mustEmbedUnimplementedStockQuoteServer()
}

func RegisterStockQuoteServer(s grpc.ServiceRegistrar, srv StockQuoteServer) {
	s.RegisterService(&StockQuote_ServiceDesc, srv)
}

func _StockQuote_GetStockQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockQuoteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockQuoteServer).GetStockQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_quote.StockQuote/GetStockQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockQuoteServer).GetStockQuote(ctx, req.(*StockQuoteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockQuote_GetStockQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockQuoteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockQuoteServer).GetStockQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_quote.StockQuote/GetStockQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockQuoteServer).GetStockQuotes(ctx, req.(*StockQuoteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockQuote_StreamGetStockQuotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StockQuoteFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockQuoteServer).StreamGetStockQuotes(m, &stockQuoteStreamGetStockQuotesServer{stream})
}

type StockQuote_StreamGetStockQuotesServer interface {
	Send(*StockQuotePayload) error
	grpc.ServerStream
}

type stockQuoteStreamGetStockQuotesServer struct {
	grpc.ServerStream
}

func (x *stockQuoteStreamGetStockQuotesServer) Send(m *StockQuotePayload) error {
	return x.ServerStream.SendMsg(m)
}

func _StockQuote_CreateStockQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockQuotePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockQuoteServer).CreateStockQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_quote.StockQuote/CreateStockQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockQuoteServer).CreateStockQuote(ctx, req.(*StockQuotePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockQuote_CreateStockQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockQuotePayloads)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockQuoteServer).CreateStockQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_quote.StockQuote/CreateStockQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockQuoteServer).CreateStockQuotes(ctx, req.(*StockQuotePayloads))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockQuote_StreamCreateStockQuotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StockQuoteServer).StreamCreateStockQuotes(&stockQuoteStreamCreateStockQuotesServer{stream})
}

type StockQuote_StreamCreateStockQuotesServer interface {
	SendAndClose(*StockQuoteResponse) error
	Recv() (*StockQuotePayload, error)
	grpc.ServerStream
}

type stockQuoteStreamCreateStockQuotesServer struct {
	grpc.ServerStream
}

func (x *stockQuoteStreamCreateStockQuotesServer) SendAndClose(m *StockQuoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stockQuoteStreamCreateStockQuotesServer) Recv() (*StockQuotePayload, error) {
	m := new(StockQuotePayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StockQuote_DeleteStockQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockQuoteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockQuoteServer).DeleteStockQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_quote.StockQuote/DeleteStockQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockQuoteServer).DeleteStockQuotes(ctx, req.(*StockQuoteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// StockQuote_ServiceDesc is the grpc.ServiceDesc for StockQuote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockQuote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock_quote.StockQuote",
	HandlerType: (*StockQuoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStockQuote",
			Handler:    _StockQuote_GetStockQuote_Handler,
		},
		{
			MethodName: "GetStockQuotes",
			Handler:    _StockQuote_GetStockQuotes_Handler,
		},
		{
			MethodName: "CreateStockQuote",
			Handler:    _StockQuote_CreateStockQuote_Handler,
		},
		{
			MethodName: "CreateStockQuotes",
			Handler:    _StockQuote_CreateStockQuotes_Handler,
		},
		{
			MethodName: "DeleteStockQuotes",
			Handler:    _StockQuote_DeleteStockQuotes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGetStockQuotes",
			Handler:       _StockQuote_StreamGetStockQuotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamCreateStockQuotes",
			Handler:       _StockQuote_StreamCreateStockQuotes_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stock_quote.proto",
}
