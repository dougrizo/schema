// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptoTradeClient is the client API for CryptoTrade service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoTradeClient interface {
	GetCryptoTrade(ctx context.Context, in *CryptoTradeFilter, opts ...grpc.CallOption) (*CryptoTradePayload, error)
	GetCryptoTrades(ctx context.Context, in *CryptoTradeFilter, opts ...grpc.CallOption) (*CryptoTradePayloads, error)
	StreamGetCryptoTrades(ctx context.Context, in *CryptoTradeFilter, opts ...grpc.CallOption) (CryptoTrade_StreamGetCryptoTradesClient, error)
	CreateCryptoTrade(ctx context.Context, in *CryptoTradePayload, opts ...grpc.CallOption) (*CryptoTradeResponse, error)
	CreateCryptoTrades(ctx context.Context, in *CryptoTradePayloads, opts ...grpc.CallOption) (*CryptoTradeResponse, error)
	StreamCreateCryptoTrades(ctx context.Context, opts ...grpc.CallOption) (CryptoTrade_StreamCreateCryptoTradesClient, error)
	DeleteCryptoTrades(ctx context.Context, in *CryptoTradeFilter, opts ...grpc.CallOption) (*CryptoTradeResponse, error)
}

type cryptoTradeClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoTradeClient(cc grpc.ClientConnInterface) CryptoTradeClient {
	return &cryptoTradeClient{cc}
}

func (c *cryptoTradeClient) GetCryptoTrade(ctx context.Context, in *CryptoTradeFilter, opts ...grpc.CallOption) (*CryptoTradePayload, error) {
	out := new(CryptoTradePayload)
	err := c.cc.Invoke(ctx, "/crypto_trade.CryptoTrade/GetCryptoTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoTradeClient) GetCryptoTrades(ctx context.Context, in *CryptoTradeFilter, opts ...grpc.CallOption) (*CryptoTradePayloads, error) {
	out := new(CryptoTradePayloads)
	err := c.cc.Invoke(ctx, "/crypto_trade.CryptoTrade/GetCryptoTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoTradeClient) StreamGetCryptoTrades(ctx context.Context, in *CryptoTradeFilter, opts ...grpc.CallOption) (CryptoTrade_StreamGetCryptoTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CryptoTrade_ServiceDesc.Streams[0], "/crypto_trade.CryptoTrade/StreamGetCryptoTrades", opts...)
	if err != nil {
		return nil, err
	}
	x := &cryptoTradeStreamGetCryptoTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CryptoTrade_StreamGetCryptoTradesClient interface {
	Recv() (*CryptoTradePayload, error)
	grpc.ClientStream
}

type cryptoTradeStreamGetCryptoTradesClient struct {
	grpc.ClientStream
}

func (x *cryptoTradeStreamGetCryptoTradesClient) Recv() (*CryptoTradePayload, error) {
	m := new(CryptoTradePayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cryptoTradeClient) CreateCryptoTrade(ctx context.Context, in *CryptoTradePayload, opts ...grpc.CallOption) (*CryptoTradeResponse, error) {
	out := new(CryptoTradeResponse)
	err := c.cc.Invoke(ctx, "/crypto_trade.CryptoTrade/CreateCryptoTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoTradeClient) CreateCryptoTrades(ctx context.Context, in *CryptoTradePayloads, opts ...grpc.CallOption) (*CryptoTradeResponse, error) {
	out := new(CryptoTradeResponse)
	err := c.cc.Invoke(ctx, "/crypto_trade.CryptoTrade/CreateCryptoTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoTradeClient) StreamCreateCryptoTrades(ctx context.Context, opts ...grpc.CallOption) (CryptoTrade_StreamCreateCryptoTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CryptoTrade_ServiceDesc.Streams[1], "/crypto_trade.CryptoTrade/StreamCreateCryptoTrades", opts...)
	if err != nil {
		return nil, err
	}
	x := &cryptoTradeStreamCreateCryptoTradesClient{stream}
	return x, nil
}

type CryptoTrade_StreamCreateCryptoTradesClient interface {
	Send(*CryptoTradePayload) error
	CloseAndRecv() (*CryptoTradeResponse, error)
	grpc.ClientStream
}

type cryptoTradeStreamCreateCryptoTradesClient struct {
	grpc.ClientStream
}

func (x *cryptoTradeStreamCreateCryptoTradesClient) Send(m *CryptoTradePayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cryptoTradeStreamCreateCryptoTradesClient) CloseAndRecv() (*CryptoTradeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CryptoTradeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cryptoTradeClient) DeleteCryptoTrades(ctx context.Context, in *CryptoTradeFilter, opts ...grpc.CallOption) (*CryptoTradeResponse, error) {
	out := new(CryptoTradeResponse)
	err := c.cc.Invoke(ctx, "/crypto_trade.CryptoTrade/DeleteCryptoTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoTradeServer is the server API for CryptoTrade service.
// All implementations must embed UnimplementedCryptoTradeServer
// for forward compatibility
type CryptoTradeServer interface {
	GetCryptoTrade(context.Context, *CryptoTradeFilter) (*CryptoTradePayload, error)
	GetCryptoTrades(context.Context, *CryptoTradeFilter) (*CryptoTradePayloads, error)
	StreamGetCryptoTrades(*CryptoTradeFilter, CryptoTrade_StreamGetCryptoTradesServer) error
	CreateCryptoTrade(context.Context, *CryptoTradePayload) (*CryptoTradeResponse, error)
	CreateCryptoTrades(context.Context, *CryptoTradePayloads) (*CryptoTradeResponse, error)
	StreamCreateCryptoTrades(CryptoTrade_StreamCreateCryptoTradesServer) error
	DeleteCryptoTrades(context.Context, *CryptoTradeFilter) (*CryptoTradeResponse, error)
	mustEmbedUnimplementedCryptoTradeServer()
}

// UnimplementedCryptoTradeServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoTradeServer struct {
}

func (UnimplementedCryptoTradeServer) GetCryptoTrade(context.Context, *CryptoTradeFilter) (*CryptoTradePayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCryptoTrade not implemented")
}
func (UnimplementedCryptoTradeServer) GetCryptoTrades(context.Context, *CryptoTradeFilter) (*CryptoTradePayloads, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCryptoTrades not implemented")
}
func (UnimplementedCryptoTradeServer) StreamGetCryptoTrades(*CryptoTradeFilter, CryptoTrade_StreamGetCryptoTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGetCryptoTrades not implemented")
}
func (UnimplementedCryptoTradeServer) CreateCryptoTrade(context.Context, *CryptoTradePayload) (*CryptoTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCryptoTrade not implemented")
}
func (UnimplementedCryptoTradeServer) CreateCryptoTrades(context.Context, *CryptoTradePayloads) (*CryptoTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCryptoTrades not implemented")
}
func (UnimplementedCryptoTradeServer) StreamCreateCryptoTrades(CryptoTrade_StreamCreateCryptoTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCreateCryptoTrades not implemented")
}
func (UnimplementedCryptoTradeServer) DeleteCryptoTrades(context.Context, *CryptoTradeFilter) (*CryptoTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCryptoTrades not implemented")
}
func (UnimplementedCryptoTradeServer) mustEmbedUnimplementedCryptoTradeServer() {}

// UnsafeCryptoTradeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoTradeServer will
// result in compilation errors.
type UnsafeCryptoTradeServer interface {
	mustEmbedUnimplementedCryptoTradeServer()
}

func RegisterCryptoTradeServer(s grpc.ServiceRegistrar, srv CryptoTradeServer) {
	s.RegisterService(&CryptoTrade_ServiceDesc, srv)
}

func _CryptoTrade_GetCryptoTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoTradeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoTradeServer).GetCryptoTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_trade.CryptoTrade/GetCryptoTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoTradeServer).GetCryptoTrade(ctx, req.(*CryptoTradeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoTrade_GetCryptoTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoTradeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoTradeServer).GetCryptoTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_trade.CryptoTrade/GetCryptoTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoTradeServer).GetCryptoTrades(ctx, req.(*CryptoTradeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoTrade_StreamGetCryptoTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CryptoTradeFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptoTradeServer).StreamGetCryptoTrades(m, &cryptoTradeStreamGetCryptoTradesServer{stream})
}

type CryptoTrade_StreamGetCryptoTradesServer interface {
	Send(*CryptoTradePayload) error
	grpc.ServerStream
}

type cryptoTradeStreamGetCryptoTradesServer struct {
	grpc.ServerStream
}

func (x *cryptoTradeStreamGetCryptoTradesServer) Send(m *CryptoTradePayload) error {
	return x.ServerStream.SendMsg(m)
}

func _CryptoTrade_CreateCryptoTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoTradePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoTradeServer).CreateCryptoTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_trade.CryptoTrade/CreateCryptoTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoTradeServer).CreateCryptoTrade(ctx, req.(*CryptoTradePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoTrade_CreateCryptoTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoTradePayloads)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoTradeServer).CreateCryptoTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_trade.CryptoTrade/CreateCryptoTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoTradeServer).CreateCryptoTrades(ctx, req.(*CryptoTradePayloads))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoTrade_StreamCreateCryptoTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CryptoTradeServer).StreamCreateCryptoTrades(&cryptoTradeStreamCreateCryptoTradesServer{stream})
}

type CryptoTrade_StreamCreateCryptoTradesServer interface {
	SendAndClose(*CryptoTradeResponse) error
	Recv() (*CryptoTradePayload, error)
	grpc.ServerStream
}

type cryptoTradeStreamCreateCryptoTradesServer struct {
	grpc.ServerStream
}

func (x *cryptoTradeStreamCreateCryptoTradesServer) SendAndClose(m *CryptoTradeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cryptoTradeStreamCreateCryptoTradesServer) Recv() (*CryptoTradePayload, error) {
	m := new(CryptoTradePayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CryptoTrade_DeleteCryptoTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoTradeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoTradeServer).DeleteCryptoTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_trade.CryptoTrade/DeleteCryptoTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoTradeServer).DeleteCryptoTrades(ctx, req.(*CryptoTradeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptoTrade_ServiceDesc is the grpc.ServiceDesc for CryptoTrade service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoTrade_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crypto_trade.CryptoTrade",
	HandlerType: (*CryptoTradeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCryptoTrade",
			Handler:    _CryptoTrade_GetCryptoTrade_Handler,
		},
		{
			MethodName: "GetCryptoTrades",
			Handler:    _CryptoTrade_GetCryptoTrades_Handler,
		},
		{
			MethodName: "CreateCryptoTrade",
			Handler:    _CryptoTrade_CreateCryptoTrade_Handler,
		},
		{
			MethodName: "CreateCryptoTrades",
			Handler:    _CryptoTrade_CreateCryptoTrades_Handler,
		},
		{
			MethodName: "DeleteCryptoTrades",
			Handler:    _CryptoTrade_DeleteCryptoTrades_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGetCryptoTrades",
			Handler:       _CryptoTrade_StreamGetCryptoTrades_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamCreateCryptoTrades",
			Handler:       _CryptoTrade_StreamCreateCryptoTrades_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "crypto_trade.proto",
}
