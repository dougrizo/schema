// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: stock_quote.proto

package schema

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StockQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *StockQuoteResponse) Reset() {
	*x = StockQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_quote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuoteResponse) ProtoMessage() {}

func (x *StockQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stock_quote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuoteResponse.ProtoReflect.Descriptor instead.
func (*StockQuoteResponse) Descriptor() ([]byte, []int) {
	return file_stock_quote_proto_rawDescGZIP(), []int{0}
}

func (x *StockQuoteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StockQuoteResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StockQuotePayloads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payloads []*StockQuotePayload `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *StockQuotePayloads) Reset() {
	*x = StockQuotePayloads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_quote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuotePayloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuotePayloads) ProtoMessage() {}

func (x *StockQuotePayloads) ProtoReflect() protoreflect.Message {
	mi := &file_stock_quote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuotePayloads.ProtoReflect.Descriptor instead.
func (*StockQuotePayloads) Descriptor() ([]byte, []int) {
	return file_stock_quote_proto_rawDescGZIP(), []int{1}
}

func (x *StockQuotePayloads) GetPayloads() []*StockQuotePayload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

type StockQuotePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Timestamp int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Bid       float32 `protobuf:"fixed32,3,opt,name=bid,proto3" json:"bid,omitempty"`
	BidSize   float32 `protobuf:"fixed32,4,opt,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`
	Ask       float32 `protobuf:"fixed32,5,opt,name=ask,proto3" json:"ask,omitempty"`
	AskSize   float32 `protobuf:"fixed32,6,opt,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`
}

func (x *StockQuotePayload) Reset() {
	*x = StockQuotePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_quote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuotePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuotePayload) ProtoMessage() {}

func (x *StockQuotePayload) ProtoReflect() protoreflect.Message {
	mi := &file_stock_quote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuotePayload.ProtoReflect.Descriptor instead.
func (*StockQuotePayload) Descriptor() ([]byte, []int) {
	return file_stock_quote_proto_rawDescGZIP(), []int{2}
}

func (x *StockQuotePayload) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockQuotePayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StockQuotePayload) GetBid() float32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *StockQuotePayload) GetBidSize() float32 {
	if x != nil {
		return x.BidSize
	}
	return 0
}

func (x *StockQuotePayload) GetAsk() float32 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *StockQuotePayload) GetAskSize() float32 {
	if x != nil {
		return x.AskSize
	}
	return 0
}

type StockQuoteFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Before int64  `protobuf:"varint,2,opt,name=before,proto3" json:"before,omitempty"`
	After  int64  `protobuf:"varint,3,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *StockQuoteFilter) Reset() {
	*x = StockQuoteFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_quote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuoteFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuoteFilter) ProtoMessage() {}

func (x *StockQuoteFilter) ProtoReflect() protoreflect.Message {
	mi := &file_stock_quote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuoteFilter.ProtoReflect.Descriptor instead.
func (*StockQuoteFilter) Descriptor() ([]byte, []int) {
	return file_stock_quote_proto_rawDescGZIP(), []int{3}
}

func (x *StockQuoteFilter) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockQuoteFilter) GetBefore() int64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *StockQuoteFilter) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

var File_stock_quote_proto protoreflect.FileDescriptor

var file_stock_quote_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x22, 0x44, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x08,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x69, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x61, 0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x58,
	0x0a, 0x10, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x32, 0xf4, 0x04, 0x0a, 0x0a, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x1f, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f,
	0x75, 0x67, 0x72, 0x69, 0x7a, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x6f,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stock_quote_proto_rawDescOnce sync.Once
	file_stock_quote_proto_rawDescData = file_stock_quote_proto_rawDesc
)

func file_stock_quote_proto_rawDescGZIP() []byte {
	file_stock_quote_proto_rawDescOnce.Do(func() {
		file_stock_quote_proto_rawDescData = protoimpl.X.CompressGZIP(file_stock_quote_proto_rawDescData)
	})
	return file_stock_quote_proto_rawDescData
}

var file_stock_quote_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_stock_quote_proto_goTypes = []interface{}{
	(*StockQuoteResponse)(nil), // 0: stock_quote.StockQuoteResponse
	(*StockQuotePayloads)(nil), // 1: stock_quote.StockQuotePayloads
	(*StockQuotePayload)(nil),  // 2: stock_quote.StockQuotePayload
	(*StockQuoteFilter)(nil),   // 3: stock_quote.StockQuoteFilter
}
var file_stock_quote_proto_depIdxs = []int32{
	2, // 0: stock_quote.StockQuotePayloads.payloads:type_name -> stock_quote.StockQuotePayload
	3, // 1: stock_quote.StockQuote.GetStockQuote:input_type -> stock_quote.StockQuoteFilter
	3, // 2: stock_quote.StockQuote.GetStockQuotes:input_type -> stock_quote.StockQuoteFilter
	3, // 3: stock_quote.StockQuote.StreamGetStockQuotes:input_type -> stock_quote.StockQuoteFilter
	2, // 4: stock_quote.StockQuote.CreateStockQuote:input_type -> stock_quote.StockQuotePayload
	1, // 5: stock_quote.StockQuote.CreateStockQuotes:input_type -> stock_quote.StockQuotePayloads
	2, // 6: stock_quote.StockQuote.StreamCreateStockQuotes:input_type -> stock_quote.StockQuotePayload
	3, // 7: stock_quote.StockQuote.DeleteStockQuotes:input_type -> stock_quote.StockQuoteFilter
	2, // 8: stock_quote.StockQuote.GetStockQuote:output_type -> stock_quote.StockQuotePayload
	1, // 9: stock_quote.StockQuote.GetStockQuotes:output_type -> stock_quote.StockQuotePayloads
	2, // 10: stock_quote.StockQuote.StreamGetStockQuotes:output_type -> stock_quote.StockQuotePayload
	0, // 11: stock_quote.StockQuote.CreateStockQuote:output_type -> stock_quote.StockQuoteResponse
	0, // 12: stock_quote.StockQuote.CreateStockQuotes:output_type -> stock_quote.StockQuoteResponse
	0, // 13: stock_quote.StockQuote.StreamCreateStockQuotes:output_type -> stock_quote.StockQuoteResponse
	0, // 14: stock_quote.StockQuote.DeleteStockQuotes:output_type -> stock_quote.StockQuoteResponse
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_stock_quote_proto_init() }
func file_stock_quote_proto_init() {
	if File_stock_quote_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stock_quote_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_quote_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuotePayloads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_quote_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuotePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_quote_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuoteFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stock_quote_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stock_quote_proto_goTypes,
		DependencyIndexes: file_stock_quote_proto_depIdxs,
		MessageInfos:      file_stock_quote_proto_msgTypes,
	}.Build()
	File_stock_quote_proto = out.File
	file_stock_quote_proto_rawDesc = nil
	file_stock_quote_proto_goTypes = nil
	file_stock_quote_proto_depIdxs = nil
}
