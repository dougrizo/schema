// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: crypto_quote.proto

package schema

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CryptoQuotePayloads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payloads []*CryptoQuotePayload `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *CryptoQuotePayloads) Reset() {
	*x = CryptoQuotePayloads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_quote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoQuotePayloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoQuotePayloads) ProtoMessage() {}

func (x *CryptoQuotePayloads) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_quote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoQuotePayloads.ProtoReflect.Descriptor instead.
func (*CryptoQuotePayloads) Descriptor() ([]byte, []int) {
	return file_crypto_quote_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoQuotePayloads) GetPayloads() []*CryptoQuotePayload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

type CryptoQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CryptoQuoteResponse) Reset() {
	*x = CryptoQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_quote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoQuoteResponse) ProtoMessage() {}

func (x *CryptoQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_quote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoQuoteResponse.ProtoReflect.Descriptor instead.
func (*CryptoQuoteResponse) Descriptor() ([]byte, []int) {
	return file_crypto_quote_proto_rawDescGZIP(), []int{1}
}

func (x *CryptoQuoteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CryptoQuoteResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CryptoQuotePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair      string  `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Timestamp int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Bid1      float32 `protobuf:"fixed32,3,opt,name=bid1,proto3" json:"bid1,omitempty"`
	BidSize1  float32 `protobuf:"fixed32,4,opt,name=bid_size1,json=bidSize1,proto3" json:"bid_size1,omitempty"`
	Bid2      float32 `protobuf:"fixed32,5,opt,name=bid2,proto3" json:"bid2,omitempty"`
	BidSize2  float32 `protobuf:"fixed32,6,opt,name=bid_size2,json=bidSize2,proto3" json:"bid_size2,omitempty"`
	Bid3      float32 `protobuf:"fixed32,7,opt,name=bid3,proto3" json:"bid3,omitempty"`
	BidSize3  float32 `protobuf:"fixed32,8,opt,name=bid_size3,json=bidSize3,proto3" json:"bid_size3,omitempty"`
	Bid4      float32 `protobuf:"fixed32,9,opt,name=bid4,proto3" json:"bid4,omitempty"`
	BidSize4  float32 `protobuf:"fixed32,10,opt,name=bid_size4,json=bidSize4,proto3" json:"bid_size4,omitempty"`
	Bid5      float32 `protobuf:"fixed32,11,opt,name=bid5,proto3" json:"bid5,omitempty"`
	BidSize5  float32 `protobuf:"fixed32,12,opt,name=bid_size5,json=bidSize5,proto3" json:"bid_size5,omitempty"`
	Ask1      float32 `protobuf:"fixed32,13,opt,name=ask1,proto3" json:"ask1,omitempty"`
	AskSize1  float32 `protobuf:"fixed32,14,opt,name=ask_size1,json=askSize1,proto3" json:"ask_size1,omitempty"`
	Ask2      float32 `protobuf:"fixed32,15,opt,name=ask2,proto3" json:"ask2,omitempty"`
	AskSize2  float32 `protobuf:"fixed32,16,opt,name=ask_size2,json=askSize2,proto3" json:"ask_size2,omitempty"`
	Ask3      float32 `protobuf:"fixed32,17,opt,name=ask3,proto3" json:"ask3,omitempty"`
	AskSize3  float32 `protobuf:"fixed32,18,opt,name=ask_size3,json=askSize3,proto3" json:"ask_size3,omitempty"`
	Ask4      float32 `protobuf:"fixed32,19,opt,name=ask4,proto3" json:"ask4,omitempty"`
	AskSize4  float32 `protobuf:"fixed32,20,opt,name=ask_size4,json=askSize4,proto3" json:"ask_size4,omitempty"`
	Ask5      float32 `protobuf:"fixed32,21,opt,name=ask5,proto3" json:"ask5,omitempty"`
	AskSize5  float32 `protobuf:"fixed32,22,opt,name=ask_size5,json=askSize5,proto3" json:"ask_size5,omitempty"`
}

func (x *CryptoQuotePayload) Reset() {
	*x = CryptoQuotePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_quote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoQuotePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoQuotePayload) ProtoMessage() {}

func (x *CryptoQuotePayload) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_quote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoQuotePayload.ProtoReflect.Descriptor instead.
func (*CryptoQuotePayload) Descriptor() ([]byte, []int) {
	return file_crypto_quote_proto_rawDescGZIP(), []int{2}
}

func (x *CryptoQuotePayload) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *CryptoQuotePayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CryptoQuotePayload) GetBid1() float32 {
	if x != nil {
		return x.Bid1
	}
	return 0
}

func (x *CryptoQuotePayload) GetBidSize1() float32 {
	if x != nil {
		return x.BidSize1
	}
	return 0
}

func (x *CryptoQuotePayload) GetBid2() float32 {
	if x != nil {
		return x.Bid2
	}
	return 0
}

func (x *CryptoQuotePayload) GetBidSize2() float32 {
	if x != nil {
		return x.BidSize2
	}
	return 0
}

func (x *CryptoQuotePayload) GetBid3() float32 {
	if x != nil {
		return x.Bid3
	}
	return 0
}

func (x *CryptoQuotePayload) GetBidSize3() float32 {
	if x != nil {
		return x.BidSize3
	}
	return 0
}

func (x *CryptoQuotePayload) GetBid4() float32 {
	if x != nil {
		return x.Bid4
	}
	return 0
}

func (x *CryptoQuotePayload) GetBidSize4() float32 {
	if x != nil {
		return x.BidSize4
	}
	return 0
}

func (x *CryptoQuotePayload) GetBid5() float32 {
	if x != nil {
		return x.Bid5
	}
	return 0
}

func (x *CryptoQuotePayload) GetBidSize5() float32 {
	if x != nil {
		return x.BidSize5
	}
	return 0
}

func (x *CryptoQuotePayload) GetAsk1() float32 {
	if x != nil {
		return x.Ask1
	}
	return 0
}

func (x *CryptoQuotePayload) GetAskSize1() float32 {
	if x != nil {
		return x.AskSize1
	}
	return 0
}

func (x *CryptoQuotePayload) GetAsk2() float32 {
	if x != nil {
		return x.Ask2
	}
	return 0
}

func (x *CryptoQuotePayload) GetAskSize2() float32 {
	if x != nil {
		return x.AskSize2
	}
	return 0
}

func (x *CryptoQuotePayload) GetAsk3() float32 {
	if x != nil {
		return x.Ask3
	}
	return 0
}

func (x *CryptoQuotePayload) GetAskSize3() float32 {
	if x != nil {
		return x.AskSize3
	}
	return 0
}

func (x *CryptoQuotePayload) GetAsk4() float32 {
	if x != nil {
		return x.Ask4
	}
	return 0
}

func (x *CryptoQuotePayload) GetAskSize4() float32 {
	if x != nil {
		return x.AskSize4
	}
	return 0
}

func (x *CryptoQuotePayload) GetAsk5() float32 {
	if x != nil {
		return x.Ask5
	}
	return 0
}

func (x *CryptoQuotePayload) GetAskSize5() float32 {
	if x != nil {
		return x.AskSize5
	}
	return 0
}

type CryptoQuoteFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Before int64  `protobuf:"varint,2,opt,name=before,proto3" json:"before,omitempty"`
	After  int64  `protobuf:"varint,3,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *CryptoQuoteFilter) Reset() {
	*x = CryptoQuoteFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_quote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoQuoteFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoQuoteFilter) ProtoMessage() {}

func (x *CryptoQuoteFilter) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_quote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoQuoteFilter.ProtoReflect.Descriptor instead.
func (*CryptoQuoteFilter) Descriptor() ([]byte, []int) {
	return file_crypto_quote_proto_rawDescGZIP(), []int{3}
}

func (x *CryptoQuoteFilter) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CryptoQuoteFilter) GetBefore() int64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *CryptoQuoteFilter) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

var File_crypto_quote_proto protoreflect.FileDescriptor

var file_crypto_quote_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x13, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb0,
	0x04, 0x0a, 0x12, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x31, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x69, 0x64, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x32,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x69, 0x64, 0x32, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x64,
	0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x69, 0x64, 0x33, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69,
	0x64, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x69, 0x64, 0x34, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x69, 0x64, 0x35, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x69, 0x64, 0x35, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x35, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x35, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x73, 0x6b, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x31,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x31, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x31, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x73, 0x6b, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x61, 0x73, 0x6b,
	0x32, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x32, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x73, 0x6b, 0x33, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x61, 0x73,
	0x6b, 0x33, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x33, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x33, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x34, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x61,
	0x73, 0x6b, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x34,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x34,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x35, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x61, 0x73, 0x6b, 0x35, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x35, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x35, 0x22, 0x59, 0x0a, 0x11, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x32, 0x98, 0x05, 0x0a,
	0x0b, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1f,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x20, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x20, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x12, 0x20, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x21, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x21,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x1a, 0x21, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x21, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x5a, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x1f, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x21, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x67, 0x72, 0x69, 0x7a, 0x6f, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crypto_quote_proto_rawDescOnce sync.Once
	file_crypto_quote_proto_rawDescData = file_crypto_quote_proto_rawDesc
)

func file_crypto_quote_proto_rawDescGZIP() []byte {
	file_crypto_quote_proto_rawDescOnce.Do(func() {
		file_crypto_quote_proto_rawDescData = protoimpl.X.CompressGZIP(file_crypto_quote_proto_rawDescData)
	})
	return file_crypto_quote_proto_rawDescData
}

var file_crypto_quote_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_crypto_quote_proto_goTypes = []interface{}{
	(*CryptoQuotePayloads)(nil), // 0: crypto_quote.CryptoQuotePayloads
	(*CryptoQuoteResponse)(nil), // 1: crypto_quote.CryptoQuoteResponse
	(*CryptoQuotePayload)(nil),  // 2: crypto_quote.CryptoQuotePayload
	(*CryptoQuoteFilter)(nil),   // 3: crypto_quote.CryptoQuoteFilter
}
var file_crypto_quote_proto_depIdxs = []int32{
	2, // 0: crypto_quote.CryptoQuotePayloads.payloads:type_name -> crypto_quote.CryptoQuotePayload
	3, // 1: crypto_quote.CryptoQuote.GetCryptoQuote:input_type -> crypto_quote.CryptoQuoteFilter
	3, // 2: crypto_quote.CryptoQuote.GetCryptoQuotes:input_type -> crypto_quote.CryptoQuoteFilter
	3, // 3: crypto_quote.CryptoQuote.StreamGetCryptoQuotes:input_type -> crypto_quote.CryptoQuoteFilter
	2, // 4: crypto_quote.CryptoQuote.CreateCryptoQuote:input_type -> crypto_quote.CryptoQuotePayload
	0, // 5: crypto_quote.CryptoQuote.CreateCryptoQuotes:input_type -> crypto_quote.CryptoQuotePayloads
	2, // 6: crypto_quote.CryptoQuote.StreamCreateCryptoQuotes:input_type -> crypto_quote.CryptoQuotePayload
	3, // 7: crypto_quote.CryptoQuote.DeleteCryptoQuotes:input_type -> crypto_quote.CryptoQuoteFilter
	2, // 8: crypto_quote.CryptoQuote.GetCryptoQuote:output_type -> crypto_quote.CryptoQuotePayload
	0, // 9: crypto_quote.CryptoQuote.GetCryptoQuotes:output_type -> crypto_quote.CryptoQuotePayloads
	2, // 10: crypto_quote.CryptoQuote.StreamGetCryptoQuotes:output_type -> crypto_quote.CryptoQuotePayload
	1, // 11: crypto_quote.CryptoQuote.CreateCryptoQuote:output_type -> crypto_quote.CryptoQuoteResponse
	1, // 12: crypto_quote.CryptoQuote.CreateCryptoQuotes:output_type -> crypto_quote.CryptoQuoteResponse
	1, // 13: crypto_quote.CryptoQuote.StreamCreateCryptoQuotes:output_type -> crypto_quote.CryptoQuoteResponse
	1, // 14: crypto_quote.CryptoQuote.DeleteCryptoQuotes:output_type -> crypto_quote.CryptoQuoteResponse
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_crypto_quote_proto_init() }
func file_crypto_quote_proto_init() {
	if File_crypto_quote_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_crypto_quote_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoQuotePayloads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_quote_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_quote_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoQuotePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_quote_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoQuoteFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crypto_quote_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_crypto_quote_proto_goTypes,
		DependencyIndexes: file_crypto_quote_proto_depIdxs,
		MessageInfos:      file_crypto_quote_proto_msgTypes,
	}.Build()
	File_crypto_quote_proto = out.File
	file_crypto_quote_proto_rawDesc = nil
	file_crypto_quote_proto_goTypes = nil
	file_crypto_quote_proto_depIdxs = nil
}
