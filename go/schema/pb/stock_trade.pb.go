// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: stock_trade.proto

package schema

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StockTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *StockTradeResponse) Reset() {
	*x = StockTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockTradeResponse) ProtoMessage() {}

func (x *StockTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stock_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockTradeResponse.ProtoReflect.Descriptor instead.
func (*StockTradeResponse) Descriptor() ([]byte, []int) {
	return file_stock_trade_proto_rawDescGZIP(), []int{0}
}

func (x *StockTradeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StockTradeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StockTradePayloads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payloads []*StockTradePayload `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *StockTradePayloads) Reset() {
	*x = StockTradePayloads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockTradePayloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockTradePayloads) ProtoMessage() {}

func (x *StockTradePayloads) ProtoReflect() protoreflect.Message {
	mi := &file_stock_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockTradePayloads.ProtoReflect.Descriptor instead.
func (*StockTradePayloads) Descriptor() ([]byte, []int) {
	return file_stock_trade_proto_rawDescGZIP(), []int{1}
}

func (x *StockTradePayloads) GetPayloads() []*StockTradePayload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

type StockTradePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Timestamp int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price     float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	Size      float32 `protobuf:"fixed32,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *StockTradePayload) Reset() {
	*x = StockTradePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockTradePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockTradePayload) ProtoMessage() {}

func (x *StockTradePayload) ProtoReflect() protoreflect.Message {
	mi := &file_stock_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockTradePayload.ProtoReflect.Descriptor instead.
func (*StockTradePayload) Descriptor() ([]byte, []int) {
	return file_stock_trade_proto_rawDescGZIP(), []int{2}
}

func (x *StockTradePayload) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockTradePayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StockTradePayload) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StockTradePayload) GetSize() float32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type StockTradeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Before int64  `protobuf:"varint,2,opt,name=before,proto3" json:"before,omitempty"`
	After  int64  `protobuf:"varint,3,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *StockTradeFilter) Reset() {
	*x = StockTradeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockTradeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockTradeFilter) ProtoMessage() {}

func (x *StockTradeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_stock_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockTradeFilter.ProtoReflect.Descriptor instead.
func (*StockTradeFilter) Descriptor() ([]byte, []int) {
	return file_stock_trade_proto_rawDescGZIP(), []int{3}
}

func (x *StockTradeFilter) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockTradeFilter) GetBefore() int64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *StockTradeFilter) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

var File_stock_trade_proto protoreflect.FileDescriptor

var file_stock_trade_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x22, 0x44, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x08,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x73, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x58, 0x0a,
	0x10, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x32, 0xf3, 0x04, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x13,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x12, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x26, 0x5a,
	0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x67,
	0x72, 0x69, 0x7a, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stock_trade_proto_rawDescOnce sync.Once
	file_stock_trade_proto_rawDescData = file_stock_trade_proto_rawDesc
)

func file_stock_trade_proto_rawDescGZIP() []byte {
	file_stock_trade_proto_rawDescOnce.Do(func() {
		file_stock_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_stock_trade_proto_rawDescData)
	})
	return file_stock_trade_proto_rawDescData
}

var file_stock_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_stock_trade_proto_goTypes = []interface{}{
	(*StockTradeResponse)(nil), // 0: stock_trade.StockTradeResponse
	(*StockTradePayloads)(nil), // 1: stock_trade.StockTradePayloads
	(*StockTradePayload)(nil),  // 2: stock_trade.StockTradePayload
	(*StockTradeFilter)(nil),   // 3: stock_trade.StockTradeFilter
}
var file_stock_trade_proto_depIdxs = []int32{
	2, // 0: stock_trade.StockTradePayloads.payloads:type_name -> stock_trade.StockTradePayload
	3, // 1: stock_trade.StockTrade.GetStockTrade:input_type -> stock_trade.StockTradeFilter
	3, // 2: stock_trade.StockTrade.GetStockTrades:input_type -> stock_trade.StockTradeFilter
	3, // 3: stock_trade.StockTrade.StreamGetStockTrade:input_type -> stock_trade.StockTradeFilter
	2, // 4: stock_trade.StockTrade.CreateStockTrade:input_type -> stock_trade.StockTradePayload
	1, // 5: stock_trade.StockTrade.CreateStockTrades:input_type -> stock_trade.StockTradePayloads
	2, // 6: stock_trade.StockTrade.StreamCreateStockTrades:input_type -> stock_trade.StockTradePayload
	3, // 7: stock_trade.StockTrade.DeleteStockTrades:input_type -> stock_trade.StockTradeFilter
	2, // 8: stock_trade.StockTrade.GetStockTrade:output_type -> stock_trade.StockTradePayload
	1, // 9: stock_trade.StockTrade.GetStockTrades:output_type -> stock_trade.StockTradePayloads
	2, // 10: stock_trade.StockTrade.StreamGetStockTrade:output_type -> stock_trade.StockTradePayload
	0, // 11: stock_trade.StockTrade.CreateStockTrade:output_type -> stock_trade.StockTradeResponse
	0, // 12: stock_trade.StockTrade.CreateStockTrades:output_type -> stock_trade.StockTradeResponse
	0, // 13: stock_trade.StockTrade.StreamCreateStockTrades:output_type -> stock_trade.StockTradeResponse
	0, // 14: stock_trade.StockTrade.DeleteStockTrades:output_type -> stock_trade.StockTradeResponse
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_stock_trade_proto_init() }
func file_stock_trade_proto_init() {
	if File_stock_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stock_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockTradePayloads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_trade_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockTradePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_trade_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockTradeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stock_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stock_trade_proto_goTypes,
		DependencyIndexes: file_stock_trade_proto_depIdxs,
		MessageInfos:      file_stock_trade_proto_msgTypes,
	}.Build()
	File_stock_trade_proto = out.File
	file_stock_trade_proto_rawDesc = nil
	file_stock_trade_proto_goTypes = nil
	file_stock_trade_proto_depIdxs = nil
}
