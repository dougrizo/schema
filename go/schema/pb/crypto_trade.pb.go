// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: crypto_trade.proto

package schema

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CryptoTradePayloads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payloads []*CryptoTradePayload `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *CryptoTradePayloads) Reset() {
	*x = CryptoTradePayloads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoTradePayloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoTradePayloads) ProtoMessage() {}

func (x *CryptoTradePayloads) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoTradePayloads.ProtoReflect.Descriptor instead.
func (*CryptoTradePayloads) Descriptor() ([]byte, []int) {
	return file_crypto_trade_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoTradePayloads) GetPayloads() []*CryptoTradePayload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

type CryptoTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CryptoTradeResponse) Reset() {
	*x = CryptoTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoTradeResponse) ProtoMessage() {}

func (x *CryptoTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoTradeResponse.ProtoReflect.Descriptor instead.
func (*CryptoTradeResponse) Descriptor() ([]byte, []int) {
	return file_crypto_trade_proto_rawDescGZIP(), []int{1}
}

func (x *CryptoTradeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CryptoTradeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CryptoTradePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair          string  `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Timestamp     int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price         float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	Quantity      float32 `protobuf:"fixed32,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	IsMarketMaker bool    `protobuf:"varint,5,opt,name=is_market_maker,json=isMarketMaker,proto3" json:"is_market_maker,omitempty"`
}

func (x *CryptoTradePayload) Reset() {
	*x = CryptoTradePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoTradePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoTradePayload) ProtoMessage() {}

func (x *CryptoTradePayload) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoTradePayload.ProtoReflect.Descriptor instead.
func (*CryptoTradePayload) Descriptor() ([]byte, []int) {
	return file_crypto_trade_proto_rawDescGZIP(), []int{2}
}

func (x *CryptoTradePayload) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *CryptoTradePayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CryptoTradePayload) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CryptoTradePayload) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CryptoTradePayload) GetIsMarketMaker() bool {
	if x != nil {
		return x.IsMarketMaker
	}
	return false
}

type CryptoTradeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair   string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Before int64  `protobuf:"varint,2,opt,name=before,proto3" json:"before,omitempty"`
	After  int64  `protobuf:"varint,3,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *CryptoTradeFilter) Reset() {
	*x = CryptoTradeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoTradeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoTradeFilter) ProtoMessage() {}

func (x *CryptoTradeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoTradeFilter.ProtoReflect.Descriptor instead.
func (*CryptoTradeFilter) Descriptor() ([]byte, []int) {
	return file_crypto_trade_proto_rawDescGZIP(), []int{3}
}

func (x *CryptoTradeFilter) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *CryptoTradeFilter) GetBefore() int64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *CryptoTradeFilter) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

var File_crypto_trade_proto protoreflect.FileDescriptor

var file_crypto_trade_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x13, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa0,
	0x01, 0x0a, 0x12, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x22, 0x55, 0x0a, 0x11, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x32, 0x98, 0x05, 0x0a, 0x0b, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x20, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x12, 0x1f, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x20, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x20, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x21, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x1a, 0x21, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x20,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x1a, 0x21, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x5a, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x21,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x67, 0x72, 0x69, 0x7a, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_crypto_trade_proto_rawDescOnce sync.Once
	file_crypto_trade_proto_rawDescData = file_crypto_trade_proto_rawDesc
)

func file_crypto_trade_proto_rawDescGZIP() []byte {
	file_crypto_trade_proto_rawDescOnce.Do(func() {
		file_crypto_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_crypto_trade_proto_rawDescData)
	})
	return file_crypto_trade_proto_rawDescData
}

var file_crypto_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_crypto_trade_proto_goTypes = []interface{}{
	(*CryptoTradePayloads)(nil), // 0: crypto_trade.CryptoTradePayloads
	(*CryptoTradeResponse)(nil), // 1: crypto_trade.CryptoTradeResponse
	(*CryptoTradePayload)(nil),  // 2: crypto_trade.CryptoTradePayload
	(*CryptoTradeFilter)(nil),   // 3: crypto_trade.CryptoTradeFilter
}
var file_crypto_trade_proto_depIdxs = []int32{
	2, // 0: crypto_trade.CryptoTradePayloads.payloads:type_name -> crypto_trade.CryptoTradePayload
	3, // 1: crypto_trade.CryptoTrade.GetCryptoTrade:input_type -> crypto_trade.CryptoTradeFilter
	3, // 2: crypto_trade.CryptoTrade.GetCryptoTrades:input_type -> crypto_trade.CryptoTradeFilter
	3, // 3: crypto_trade.CryptoTrade.StreamGetCryptoTrades:input_type -> crypto_trade.CryptoTradeFilter
	2, // 4: crypto_trade.CryptoTrade.CreateCryptoTrade:input_type -> crypto_trade.CryptoTradePayload
	0, // 5: crypto_trade.CryptoTrade.CreateCryptoTrades:input_type -> crypto_trade.CryptoTradePayloads
	2, // 6: crypto_trade.CryptoTrade.StreamCreateCryptoTrades:input_type -> crypto_trade.CryptoTradePayload
	3, // 7: crypto_trade.CryptoTrade.DeleteCryptoTrades:input_type -> crypto_trade.CryptoTradeFilter
	2, // 8: crypto_trade.CryptoTrade.GetCryptoTrade:output_type -> crypto_trade.CryptoTradePayload
	0, // 9: crypto_trade.CryptoTrade.GetCryptoTrades:output_type -> crypto_trade.CryptoTradePayloads
	2, // 10: crypto_trade.CryptoTrade.StreamGetCryptoTrades:output_type -> crypto_trade.CryptoTradePayload
	1, // 11: crypto_trade.CryptoTrade.CreateCryptoTrade:output_type -> crypto_trade.CryptoTradeResponse
	1, // 12: crypto_trade.CryptoTrade.CreateCryptoTrades:output_type -> crypto_trade.CryptoTradeResponse
	1, // 13: crypto_trade.CryptoTrade.StreamCreateCryptoTrades:output_type -> crypto_trade.CryptoTradeResponse
	1, // 14: crypto_trade.CryptoTrade.DeleteCryptoTrades:output_type -> crypto_trade.CryptoTradeResponse
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_crypto_trade_proto_init() }
func file_crypto_trade_proto_init() {
	if File_crypto_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_crypto_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoTradePayloads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_trade_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoTradePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_trade_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoTradeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crypto_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_crypto_trade_proto_goTypes,
		DependencyIndexes: file_crypto_trade_proto_depIdxs,
		MessageInfos:      file_crypto_trade_proto_msgTypes,
	}.Build()
	File_crypto_trade_proto = out.File
	file_crypto_trade_proto_rawDesc = nil
	file_crypto_trade_proto_goTypes = nil
	file_crypto_trade_proto_depIdxs = nil
}
